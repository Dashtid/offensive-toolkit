# Offensive Security Toolkit - Project Configuration
# Modern Python 3.14 with Ruff tooling

[project]
name = "offensive-toolkit"
version = "0.3.0"
description = "Comprehensive security testing toolkit for authorized penetration testing"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Offensive Toolkit Contributors"}
]
keywords = ["security", "pentesting", "offensive-security", "mitre-attack"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]

# ==============================================================================
# Ruff Configuration (Modern linter & formatter)
# ==============================================================================
[tool.ruff]
# Python version target
target-version = "py314"

# Line length
line-length = 100

# File patterns to exclude
extend-exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "ISC",    # flake8-implicit-str-concat
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "ERA",    # eradicate
    "PL",     # Pylint
    "RUF",    # Ruff-specific rules
]

# Disable specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Function calls in argument defaults
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value comparison
]

# Allow autofix for these rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Formatting options
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = [
    "reconnaissance",
    "web_security",
    "api_security",
    "cloud_security",
    "post_exploitation",
    "exploitation",
    "reporting",
    "utils",
]

# ==============================================================================
# MyPy Configuration (Type checking)
# ==============================================================================
[tool.mypy]
python_version = "3.14"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = false

# ==============================================================================
# Bandit Configuration (Security scanner)
# ==============================================================================
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv"]
skips = ["B101"]  # Skip assert_used check for tests
severity = "medium"

# ==============================================================================
# Pytest Configuration
# ==============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = """
    -ra
    -q
    --strict-markers
    --strict-config
    --cov=.
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
"""
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-related",
]

# ==============================================================================
# Coverage Configuration
# ==============================================================================
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/__pycache__/*",
    "setup.py",
    "*/Lib/*",
    "*/Scripts/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# ==============================================================================
# Build System
# ==============================================================================
[build-system]
requires = ["setuptools>=69.0.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"
