#!/usr/bin/env python3
"""
Report Generator - Security Testing Reports

Generates professional security testing reports from scan results.

Usage:
    python report_generator.py --input <results.json> --output <report.html>

Example:
    python report_generator.py --input output/portscan_*.json --output report.html

Author: David Dashti
Date: 2025-10-15
"""

import argparse
import json
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

from utils.logger import get_logger
from utils.config import load_config

logger = get_logger(__name__)


class ReportGenerator:
    """Generate security testing reports."""

    def __init__(self, config: Dict[str, Any] = None):
        """Initialize report generator."""
        self.config = config or load_config()
        logger.info("Initialized ReportGenerator")

    def generate_html_report(
        self,
        results: Dict[str, Any],
        output_path: str
    ) -> bool:
        """
        Generate HTML report from results.

        Args:
            results: Scan results dictionary
            output_path: Output file path

        Returns:
            True if successful
        """
        html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Security Testing Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        h1 {{ color: #333; }}
        h2 {{ color: #666; }}
        table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
        th {{ background-color: #4CAF50; color: white; }}
        .summary {{ background-color: #f2f2f2; padding: 20px; margin: 20px 0; }}
        .warning {{ color: #ff9800; font-weight: bold; }}
    </style>
</head>
<body>
    <h1>Security Testing Report</h1>
    <p class="warning">[!] Confidential - For Authorized Personnel Only</p>

    <div class="summary">
        <h2>Executive Summary</h2>
        <p><strong>Target:</strong> {target}</p>
        <p><strong>Date:</strong> {date}</p>
        <p><strong>Findings:</strong> {findings_count}</p>
    </div>

    <h2>Detailed Findings</h2>
    {findings_table}

    <h2>Recommendations</h2>
    <ul>
        <li>Review and remediate identified vulnerabilities</li>
        <li>Implement security best practices</li>
        <li>Conduct regular security assessments</li>
    </ul>

    <footer>
        <p><em>Generated by Offensive Security Toolkit on {date}</em></p>
    </footer>
</body>
</html>
        """

        # Extract data
        target = results.get("target", "Unknown")
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        findings_count = results.get("open_ports", 0)

        # Generate findings table
        findings_table = self._generate_findings_table(results)

        # Fill template
        html = html_template.format(
            target=target,
            date=date,
            findings_count=findings_count,
            findings_table=findings_table
        )

        # Write to file
        try:
            with open(output_path, "w") as f:
                f.write(html)
            logger.info(f"Report generated: {output_path}")
            return True
        except Exception as e:
            logger.error(f"Error writing report: {e}")
            return False

    def _generate_findings_table(self, results: Dict[str, Any]) -> str:
        """Generate HTML table of findings."""
        if "results" not in results:
            return "<p>No findings to report</p>"

        rows = []
        for port, info in results.get("results", {}).items():
            rows.append(
                f"<tr>"
                f"<td>{port}</td>"
                f"<td>{info.get('service', 'Unknown')}</td>"
                f"<td>{info.get('status', 'Unknown')}</td>"
                f"</tr>"
            )

        table = (
            "<table>"
            "<tr><th>Port</th><th>Service</th><th>Status</th></tr>"
            + "".join(rows) +
            "</table>"
        )

        return table


def main() -> int:
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Report Generator")
    parser.add_argument("--input", required=True, help="Input results file (JSON)")
    parser.add_argument("--output", required=True, help="Output report file (HTML)")

    args = parser.parse_args()

    # Load results
    try:
        with open(args.input, "r") as f:
            results = json.load(f)
    except Exception as e:
        print(f"[-] Error loading results: {e}")
        return 1

    # Generate report
    generator = ReportGenerator()
    success = generator.generate_html_report(results, args.output)

    if success:
        print(f"[+] Report generated: {args.output}")
        return 0
    else:
        print(f"[-] Failed to generate report")
        return 1


if __name__ == "__main__":
    sys.exit(main())
