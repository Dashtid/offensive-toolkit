#!/usr/bin/env python3
"""
Unified Privilege Escalation Scanner

Auto-detects OS and runs appropriate privilege escalation scanner.

[!] AUTHORIZATION REQUIRED: Only use on authorized systems.

Usage:
    python privesc_scanner.py --scan all
    python privesc_scanner.py --output findings.json

Author: David Dashti
Date: 2025-10-15
"""

import argparse
import platform
import sys
from pathlib import Path

# Import OS-specific scanners
try:
    from post_exploitation.privesc_windows import WindowsPrivescScanner
except ImportError:
    WindowsPrivescScanner = None

try:
    from post_exploitation.privesc_linux import LinuxPrivescScanner
except ImportError:
    LinuxPrivescScanner = None

from utils.config import load_config
from utils.logger import get_logger

logger = get_logger(__name__)


def main() -> int:
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Unified Privilege Escalation Scanner\n"
        "[!] For authorized security testing only",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument("--scan", default="all", help="Categories to scan (all or OS-specific)")

    parser.add_argument("--output", type=Path, help="Output file for findings (JSON)")

    parser.add_argument("--config", help="Path to configuration file")

    args = parser.parse_args()

    # Load configuration
    config = load_config(args.config) if args.config else load_config()

    # Detect OS
    os_type = platform.system().lower()

    print("\n" + "=" * 70)
    print("[!] Unified Privilege Escalation Scanner")
    print(f"[*] Detected OS: {os_type}")
    print("=" * 70 + "\n")

    # Run appropriate scanner
    if os_type == "windows":
        if WindowsPrivescScanner is None:
            print("[-] Windows scanner not available")
            return 1

        print("[*] Running Windows privilege escalation scanner...")
        scanner = WindowsPrivescScanner(config)
        scanner.scan_all()

    elif os_type == "linux":
        if LinuxPrivescScanner is None:
            print("[-] Linux scanner not available")
            return 1

        print("[*] Running Linux privilege escalation scanner...")
        scanner = LinuxPrivescScanner(config)
        scanner.scan_all()

    else:
        print(f"[-] Unsupported OS: {os_type}")
        return 1

    # Get summary
    summary = scanner.get_findings_summary()

    print("\n[+] Scan Complete!")
    print(f"    Total Findings: {summary['total_findings']}")
    print(f"    Critical: {summary['by_severity']['critical']}")
    print(f"    High: {summary['by_severity']['high']}")
    print(f"    Medium: {summary['by_severity']['medium']}")

    # Save results
    if args.output:
        scanner.save_results(args.output)
        print(f"\n[+] Results saved to {args.output}")

    return 0


if __name__ == "__main__":
    sys.exit(main())
